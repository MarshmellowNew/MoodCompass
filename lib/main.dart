import 'package:flutter/material.dart';

void main() {
  runApp(const MoodCompassApp());
}

class MoodCompassApp extends StatelessWidget {
  const MoodCompassApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å',
      theme: ThemeData(
        primarySwatch: Colors.blueGrey,
      ),
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      initialRoute: '/',
      routes: {
        '/': (context) => const MainScreen(),
        '/history': (context) => const HistoryScreen(), // –ù–∞—à –≤—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω
      },
    );
  }
}

// ----------------------------------------------------
// 1. –ì–õ–ê–í–ù–´–ô –≠–ö–†–ê–ù (–õ–†4 - –í–µ—Ä—Å—Ç–∫–∞)
// ----------------------------------------------------

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null)
  String? _selectedMood;

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  final Map<String, String> _moods = {
    '–†–∞–¥–æ—Å—Ç—å': 'üòÉ',
    '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': 'üòå',
    '–ì—Ä—É—Å—Ç—å': 'üòî',
    '–≠–Ω–µ—Ä–≥–∏—è': 'üí™',
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?'),
        actions: [
          IconButton(
            icon: const Icon(Icons.history_toggle_off_outlined),
            onPressed: () {
              Navigator.pushNamed(context, '/history');
            },
            tooltip: '–ò—Å—Ç–æ—Ä–∏—è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–π',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            // –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (Grid)
            Expanded(
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2, // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                  crossAxisSpacing: 12,
                  mainAxisSpacing: 12,
                  childAspectRatio: 2.5, // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                ),
                itemCount: _moods.length,
                itemBuilder: (context, index) {
                  String moodName = _moods.keys.elementAt(index);
                  String moodEmoji = _moods.values.elementAt(index);

                  // –ö–Ω–æ–ø–∫–∞-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                  return ElevatedButton(
                    onPressed: () {
                      setState(() {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
                        _selectedMood = moodName;
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è: –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                      backgroundColor: _selectedMood == moodName
                          ? Colors.blueGrey.shade700
                          : Colors.grey.shade100,
                      foregroundColor: _selectedMood == moodName
                          ? Colors.white
                          : Colors.black87,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15),
                      ),
                      elevation: _selectedMood == moodName ? 4 : 1,
                    ),
                    child: Text(
                      '$moodEmoji $moodName',
                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
            const TextField(
              decoration: InputDecoration(
                labelText: '–ö—Ä–∞—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                hintText: '–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?',
                border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(10))),
              ),
            ),

            const SizedBox(height: 20),

            // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            ElevatedButton(
              onPressed: _selectedMood == null ? null : () {
                // –ó–∞–≥–ª—É—à–∫–∞, –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ –õ–†5
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "$_selectedMood" –≤—ã–±—Ä–∞–Ω–æ. –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫—É –≤ –õ–†5!')),
                );
              },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 15),
                textStyle: const TextStyle(fontSize: 18),
                backgroundColor: Colors.blueGrey,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ó–∞–ø–∏—Å—å'),
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),
    );
  }
}

// ----------------------------------------------------
// 2. –≠–ö–†–ê–ù –ò–°–¢–û–†–ò–ò (–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –õ–†4)
// ----------------------------------------------------

class HistoryScreen extends StatelessWidget {
  const HistoryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ò—Å—Ç–æ—Ä–∏—è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–π'),
      ),
      body: const Center(
        child: Text(
          '–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.',
          style: TextStyle(fontSize: 20),
        ),
      ),
    );
  }
}