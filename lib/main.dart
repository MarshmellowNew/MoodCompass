import 'package:flutter/material.dart';
import 'mood_entry.dart';
import 'api_service.dart';

void main() {
  runApp(const MoodCompassApp());
}

class MoodCompassApp extends StatelessWidget {
  const MoodCompassApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–º–ø–∞—Å',
      theme: ThemeData(
        primarySwatch: Colors.blueGrey,
      ),
      debugShowCheckedModeBanner: false,
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      initialRoute: '/',
      routes: {
        '/': (context) => const MainScreen(),
        '/history': (context) => const HistoryScreen(), // –≤—Ç–æ—Ä–æ–π —ç–∫—Ä–∞–Ω
      },
    );
  }
}

// ----------------------------------------------------
// 1. –ì–õ–ê–í–ù–´–ô –≠–ö–†–ê–ù
// ----------------------------------------------------

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null)
  String? _selectedMood;
  final TextEditingController _noteController = TextEditingController();


  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  final Map<String, String> _moods = {
    '–†–∞–¥–æ—Å—Ç—å': 'üòÉ',
    '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': 'üòå',
    '–ì—Ä—É—Å—Ç—å': 'üòî',
    '–≠–Ω–µ—Ä–≥–∏—è': 'üí™',
  };

  void _saveMoodEntry() async {
    if (_selectedMood == null) return;

    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ... –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç —Å API...')),
    );

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    final apiService = ApiService();
    final fact = await apiService.fetchRandomFact();

    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ñ–∞–∫—Ç–æ–º
    final newEntry = MoodEntry(
      mood: _selectedMood!,
      emoji: _moods[_selectedMood]!,
      note: _noteController.text.isNotEmpty ? _noteController.text : null,
      timestamp: DateTime.now(),
      apiFact: fact,
    );

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    moodHistory.insert(0, newEntry);

    // 5. –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    setState(() {
      _selectedMood = null;
      _noteController.clear();
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è "${newEntry.mood}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?'),
        actions: [
          IconButton(
            icon: const Icon(Icons.history_toggle_off_outlined),
            onPressed: () {
              Navigator.pushNamed(context, '/history');
            },
            tooltip: '–ò—Å—Ç–æ—Ä–∏—è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–π',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            // –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (Grid)
            Expanded(
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2, // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                  crossAxisSpacing: 12,
                  mainAxisSpacing: 12,
                  childAspectRatio: 2.5, // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                ),
                itemCount: _moods.length,
                itemBuilder: (context, index) {
                  String moodName = _moods.keys.elementAt(index);
                  String moodEmoji = _moods.values.elementAt(index);

                  // –ö–Ω–æ–ø–∫–∞-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                  return ElevatedButton(
                    onPressed: () {
                      setState(() {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
                        _selectedMood = moodName;
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è: –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                      backgroundColor: _selectedMood == moodName
                          ? Colors.blueGrey.shade700
                          : Colors.grey.shade100,
                      foregroundColor: _selectedMood == moodName
                          ? Colors.white
                          : Colors.black87,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15),
                      ),
                      elevation: _selectedMood == moodName ? 4 : 1,
                    ),
                    child: Text(
                      '$moodEmoji $moodName',
                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
            TextField(
              controller: _noteController,
              decoration: const InputDecoration(
                labelText: '–ö—Ä–∞—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                hintText: '–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?',
                border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(10))),
              ),
            ),

            const SizedBox(height: 20),

            // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            ElevatedButton(
              onPressed: _selectedMood == null ? null : _saveMoodEntry,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 15),
                textStyle: const TextStyle(fontSize: 18),
                backgroundColor: Colors.blueGrey,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ó–∞–ø–∏—Å—å'),
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),
    );
  }
}

// ----------------------------------------------------
// –≠–ö–†–ê–ù –ò–°–¢–û–†–ò–ò - HistoryScreen (–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
// ----------------------------------------------------

class HistoryScreen extends StatelessWidget {
  const HistoryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ò—Å—Ç–æ—Ä–∏—è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–π'),
      ),
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ moodHistory
      body: ListView.builder(
        itemCount: moodHistory.length,
        itemBuilder: (context, index) {
          final entry = moodHistory[index];

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ subtitle
          String subtitleText = entry.note != null && entry.note!.isNotEmpty
              ? '–ó–∞–º–µ—Ç–∫–∞: ${entry.note!}\n'
              : '–ó–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç\n';

          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç –æ—Ç API
          subtitleText += 'API –§–∞–∫—Ç: ${entry.apiFact ?? "–ù–µ –ø–æ–ª—É—á–µ–Ω"}';

          return ListTile(
            leading: Text(entry.emoji, style: const TextStyle(fontSize: 24)),
            title: Text(entry.toString()),
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º RichText –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∏ —Ñ–∞–∫—Ç–∞
            subtitle: Text(subtitleText),
            isThreeLine: true, // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è API-—Ñ–∞–∫—Ç–∞
          );
        },
      ),
    );
  }
}