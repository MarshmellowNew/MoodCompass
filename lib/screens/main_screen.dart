import 'package:flutter/material.dart';
import '../models/mood_entry.dart';
import '../services/api_service.dart';
import 'history_screen.dart'; // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
import 'stats_screen.dart'; // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

// ----------------------------------------------------
// –ì–õ–ê–í–ù–´–ô –≠–ö–†–ê–ù
// ----------------------------------------------------

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null)
  String? _selectedMood;
  final TextEditingController _noteController = TextEditingController();

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
  final Map<String, String> _moods = const {
    '–†–∞–¥–æ—Å—Ç—å': 'üòÉ',
    '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': 'üòå',
    '–ì—Ä—É—Å—Ç—å': 'üòî',
    '–≠–Ω–µ—Ä–≥–∏—è': 'üí™',
  };

  // 1. –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–õ–†5 –∏ –õ–†6)
  void _saveAndCommitEntry() async {
    if (_selectedMood == null || !mounted) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ... –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç —Å API...')),
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    final apiService = ApiService();
    final fact = await apiService.fetchRandomFact();

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ñ–∞–∫—Ç–æ–º
    final newEntry = MoodEntry(
      mood: _selectedMood!,
      emoji: _moods[_selectedMood]!,
      note: _noteController.text.isNotEmpty ? _noteController.text : null,
      timestamp: DateTime.now(),
      apiFact: fact,
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    moodHistory.insert(0, newEntry);

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    setState(() {
      _selectedMood = null;
      _noteController.clear();
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è "${newEntry.mood}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')),
    );
  }

  // 2. –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ü—É–Ω–∫—Ç 6)
  void _showConfirmationDialog() {
    if (_selectedMood == null) return;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏'),
          content: Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "${_selectedMood}"?'),
          actions: <Widget>[
            TextButton(
              child: const Text('–û—Ç–º–µ–Ω–∞', style: TextStyle(color: Colors.grey)),
              onPressed: () {
                Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
              },
            ),
            ElevatedButton(
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
              onPressed: () {
                Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
                _saveAndCommitEntry(); // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
              },
            ),
          ],
        );
      },
    );
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?'),
        actions: [
          // –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          IconButton(
            icon: const Icon(Icons.pie_chart_outline),
            onPressed: () {
              Navigator.pushNamed(context, '/stats');
            },
            tooltip: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–π',
          ),
          // –ö–Ω–æ–ø–∫–∞ –ò—Å—Ç–æ—Ä–∏–∏
          IconButton(
            icon: const Icon(Icons.history_toggle_off_outlined),
            onPressed: () {
              Navigator.pushNamed(context, '/history');
            },
            tooltip: '–ò—Å—Ç–æ—Ä–∏—è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–π',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            // –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (Grid)
            Expanded(
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2, // 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                  crossAxisSpacing: 12,
                  mainAxisSpacing: 12,
                  childAspectRatio: 1.5, // –ò–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
                ),
                itemCount: _moods.length,
                itemBuilder: (context, index) {
                  String moodName = _moods.keys.elementAt(index);
                  String moodEmoji = _moods.values.elementAt(index);

                  // –ö–Ω–æ–ø–∫–∞-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ü—É–Ω–∫—Ç 4 - –î–∏–∑–∞–π–Ω)
                  return ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _selectedMood = moodName;
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è: –ß–∏—Å—Ç—ã–π –¥–∏–∑–∞–π–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
                      backgroundColor: _selectedMood == moodName
                          ? Theme.of(context).colorScheme.secondary.withOpacity(0.8) // –¶–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
                          : Colors.white, // –ë–µ–ª—ã–π —Ñ–æ–Ω
                      foregroundColor: _selectedMood == moodName
                          ? Colors.white
                          : Colors.black87,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15),
                        side: BorderSide(
                          color: _selectedMood == moodName
                              ? Theme.of(context).colorScheme.secondary
                              : Colors.grey.shade300,
                          width: 1,
                        ),
                      ),
                      elevation: _selectedMood == moodName ? 6 : 1, // –¢–µ–Ω—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
                    ),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(moodEmoji, style: const TextStyle(fontSize: 28)),
                        const SizedBox(height: 4),
                        Text(
                          moodName,
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            color: _selectedMood == moodName ? Colors.white : Colors.black87,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            const SizedBox(height: 20),

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
            TextField(
              controller: _noteController,
              decoration: InputDecoration(
                labelText: '–ö—Ä–∞—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞',
                hintText: '–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?',
                border: const OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(10))),

                // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∏—Ä–∞–Ω–∏—è (–ü—É–Ω–∫—Ç 7)
                suffixIcon: IconButton(
                  icon: const Icon(Icons.clear, color: Colors.grey),
                  onPressed: () {
                    _noteController.clear();
                    // –í—ã–∑—ã–≤–∞–µ–º setState –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ clear –∏—Å—á–µ–∑–∞–ª–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ.
                    // setState(() {});
                  },
                ),
              ),
            ),

            const SizedBox(height: 20),

            // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            ElevatedButton(
              onPressed: _selectedMood == null ? null : _showConfirmationDialog, // –í—ã–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 15),
                textStyle: const TextStyle(fontSize: 18),
                backgroundColor: Theme.of(context).colorScheme.secondary, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ó–∞–ø–∏—Å—å'),
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),
    );
  }
}